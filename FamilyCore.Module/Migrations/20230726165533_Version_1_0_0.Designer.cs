// <auto-generated />
using System;
using FamilyCore.Module.BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FamilyCore.Module.Migrations
{
    [DbContext(typeof(FamilyCoreEFCoreDbContext))]
    [Migration("20230726165533_Version_1_0_0")]
    partial class Version_1_0_0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Proxies:ChangeTracking", true)
                .HasAnnotation("Proxies:CheckEquality", true)
                .HasAnnotation("Proxies:LazyLoading", false)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DevExpress.ExpressApp.EFCore.Updating.ModuleInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AssemblyFileName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsMain")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ModulesInfo");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.DashboardData", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<bool>("SynchronizeTitle")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("DashboardData");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Event", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AlarmTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("AllDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPostponed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Label")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("RecurrenceInfoXml")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid?>("RecurrencePatternID")
                        .HasColumnType("char(36)");

                    b.Property<int>("RemindInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("ReminderInfoXml")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("StartOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RecurrencePatternID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.FileData", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Content")
                        .HasColumnType("longblob");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("FileData");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ModelDifference", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContextId")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ModelDifferences");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ModelDifferenceAspect", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("OwnerID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Xml")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.ToTable("ModelDifferenceAspects");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyActionPermissionObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActionId")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("PermissionPolicyActionPermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Criteria")
                        .HasColumnType("longtext");

                    b.Property<string>("Members")
                        .HasColumnType("longtext");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypePermissionObjectID")
                        .HasColumnType("char(36)");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TypePermissionObjectID");

                    b.ToTable("PermissionPolicyMemberPermissionsObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyNavigationPermissionObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ItemPath")
                        .HasColumnType("longtext");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("char(36)");

                    b.Property<string>("TargetTypeFullName")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("PermissionPolicyNavigationPermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Criteria")
                        .HasColumnType("longtext");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("int");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypePermissionObjectID")
                        .HasColumnType("char(36)");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TypePermissionObjectID");

                    b.ToTable("PermissionPolicyObjectPermissionsObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("CanEditModel")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAdministrative")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAllowPermissionPriority")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("PermissionPolicy")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("PermissionPolicyRoleBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionPolicyRoleBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("CreateState")
                        .HasColumnType("int");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("int");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("int");

                    b.Property<int?>("ReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("char(36)");

                    b.Property<string>("TargetTypeFullName")
                        .HasColumnType("longtext");

                    b.Property<int?>("WriteState")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("PermissionPolicyTypePermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("ChangePasswordOnFirstLogon")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StoredPassword")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("PermissionPolicyUser");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionPolicyUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ReportDataV2", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Content")
                        .HasColumnType("longblob");

                    b.Property<string>("DataTypeName")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsInplaceReport")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ParametersObjectTypeName")
                        .HasColumnType("longtext");

                    b.Property<string>("PredefinedReportTypeName")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("ReportDataV2");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Resource", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Caption")
                        .HasColumnType("longtext");

                    b.Property<int>("Color_Int")
                        .HasColumnType("int");

                    b.HasKey("Key");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditDataItemPersistent", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AuditedObjectID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("NewObjectID")
                        .HasColumnType("char(36)");

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("OldObjectID")
                        .HasColumnType("char(36)");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext");

                    b.Property<string>("OperationType")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyName")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserObjectID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("AuditedObjectID");

                    b.HasIndex("NewObjectID");

                    b.HasIndex("OldObjectID");

                    b.HasIndex("UserObjectID");

                    b.ToTable("AuditData");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditEFCoreWeakReference", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DefaultString")
                        .HasColumnType("longtext");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TypeName")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("Key", "TypeName");

                    b.ToTable("AuditEFCoreWeakReference");
                });

            modelBuilder.Entity("EventResource", b =>
                {
                    b.Property<Guid>("EventsID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ResourcesKey")
                        .HasColumnType("char(36)");

                    b.HasKey("EventsID", "ResourcesKey");

                    b.HasIndex("ResourcesKey");

                    b.ToTable("EventResource");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Accounting.Account", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccountManagerID")
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountName")
                        .HasColumnType("longtext");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("AutoNotify")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BadDebtType")
                        .HasColumnType("int");

                    b.Property<string>("CaseNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CourtDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CourtFiledInID")
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid?>("CurrentCreditorID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateFiled")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateJudgement")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOpened")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateServed")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateSettled")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("DebtInterestRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("HeldWithID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("MainContactID")
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("MinimumPayment")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("NextPaymentDue")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("NextStatement")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("OpeningAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("OriginDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("OriginalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid?>("OriginalCreditorID")
                        .HasColumnType("char(36)");

                    b.Property<string>("OriginalId")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProsecutingAttorneyID")
                        .HasColumnType("char(36)");

                    b.Property<string>("RoutingNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountManagerID");

                    b.HasIndex("CourtFiledInID");

                    b.HasIndex("CurrentCreditorID");

                    b.HasIndex("HeldWithID");

                    b.HasIndex("MainContactID");

                    b.HasIndex("OriginalCreditorID");

                    b.HasIndex("ProsecutingAttorneyID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Accounting.CommLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AccountID")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ContactID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ContactID");

                    b.ToTable("CommLog");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Accounting.Transaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("FromAccountID")
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<bool?>("IsReconciled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReconciledDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReconciledNotes")
                        .HasColumnType("longtext");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ToAccountID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FromAccountID");

                    b.HasIndex("ToAccountID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Contacts.Payee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BillingAddressID")
                        .HasColumnType("char(36)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Extension")
                        .HasColumnType("longtext");

                    b.Property<string>("Fax")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MainPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ShippingAddressID")
                        .HasColumnType("char(36)");

                    b.Property<string>("TaxId")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("BillingAddressID");

                    b.HasIndex("ShippingAddressID");

                    b.ToTable("Payees");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Contacts.PayeeContact", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CellPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FaxLine")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("OfficeExtension")
                        .HasColumnType("longtext");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PayeeID")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("PayeeID");

                    b.ToTable("PayeeContacts");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Shared.Address", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("longtext");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("PermissionPolicyRolePermissionPolicyUser", b =>
                {
                    b.Property<Guid>("RolesID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersID")
                        .HasColumnType("char(36)");

                    b.HasKey("RolesID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("PermissionPolicyRolePermissionPolicyUser");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRole", b =>
                {
                    b.HasBaseType("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase");

                    b.HasDiscriminator().HasValue("PermissionPolicyRole");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.ApplicationUser", b =>
                {
                    b.HasBaseType("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyUser");

                    b.Property<string>("Extension")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MainPhone")
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Event", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Event", "RecurrencePattern")
                        .WithMany("RecurrenceEvents")
                        .HasForeignKey("RecurrencePatternID");

                    b.Navigation("RecurrencePattern");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ModelDifferenceAspect", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.ModelDifference", "Owner")
                        .WithMany("Aspects")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyActionPermissionObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", "Role")
                        .WithMany("ActionPermissions")
                        .HasForeignKey("RoleID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", "TypePermissionObject")
                        .WithMany("MemberPermissions")
                        .HasForeignKey("TypePermissionObjectID");

                    b.Navigation("TypePermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyNavigationPermissionObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", "Role")
                        .WithMany("NavigationPermissions")
                        .HasForeignKey("RoleID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", "TypePermissionObject")
                        .WithMany("ObjectPermissions")
                        .HasForeignKey("TypePermissionObjectID");

                    b.Navigation("TypePermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", "Role")
                        .WithMany("TypePermissions")
                        .HasForeignKey("RoleID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditDataItemPersistent", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditEFCoreWeakReference", "AuditedObject")
                        .WithMany("AuditItems")
                        .HasForeignKey("AuditedObjectID");

                    b.HasOne("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditEFCoreWeakReference", "NewObject")
                        .WithMany("NewItems")
                        .HasForeignKey("NewObjectID");

                    b.HasOne("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditEFCoreWeakReference", "OldObject")
                        .WithMany("OldItems")
                        .HasForeignKey("OldObjectID");

                    b.HasOne("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditEFCoreWeakReference", "UserObject")
                        .WithMany("UserItems")
                        .HasForeignKey("UserObjectID");

                    b.Navigation("AuditedObject");

                    b.Navigation("NewObject");

                    b.Navigation("OldObject");

                    b.Navigation("UserObject");
                });

            modelBuilder.Entity("EventResource", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Accounting.Account", b =>
                {
                    b.HasOne("FamilyCore.Module.BusinessObjects.Contacts.PayeeContact", "AccountManager")
                        .WithMany()
                        .HasForeignKey("AccountManagerID");

                    b.HasOne("FamilyCore.Module.BusinessObjects.Contacts.Payee", "CourtFiledIn")
                        .WithMany()
                        .HasForeignKey("CourtFiledInID");

                    b.HasOne("FamilyCore.Module.BusinessObjects.Contacts.Payee", "CurrentCreditor")
                        .WithMany()
                        .HasForeignKey("CurrentCreditorID");

                    b.HasOne("FamilyCore.Module.BusinessObjects.Contacts.Payee", "HeldWith")
                        .WithMany()
                        .HasForeignKey("HeldWithID");

                    b.HasOne("FamilyCore.Module.BusinessObjects.Contacts.PayeeContact", "MainContact")
                        .WithMany()
                        .HasForeignKey("MainContactID");

                    b.HasOne("FamilyCore.Module.BusinessObjects.Contacts.Payee", "OriginalCreditor")
                        .WithMany()
                        .HasForeignKey("OriginalCreditorID");

                    b.HasOne("FamilyCore.Module.BusinessObjects.Contacts.Payee", "ProsecutingAttorney")
                        .WithMany()
                        .HasForeignKey("ProsecutingAttorneyID");

                    b.Navigation("AccountManager");

                    b.Navigation("CourtFiledIn");

                    b.Navigation("CurrentCreditor");

                    b.Navigation("HeldWith");

                    b.Navigation("MainContact");

                    b.Navigation("OriginalCreditor");

                    b.Navigation("ProsecutingAttorney");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Accounting.CommLog", b =>
                {
                    b.HasOne("FamilyCore.Module.BusinessObjects.Accounting.Account", "Account")
                        .WithMany("CommLogs")
                        .HasForeignKey("AccountID");

                    b.HasOne("FamilyCore.Module.BusinessObjects.Contacts.PayeeContact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");

                    b.Navigation("Account");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Accounting.Transaction", b =>
                {
                    b.HasOne("FamilyCore.Module.BusinessObjects.Accounting.Account", "FromAccount")
                        .WithMany("Debits")
                        .HasForeignKey("FromAccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FamilyCore.Module.BusinessObjects.Accounting.Account", "ToAccount")
                        .WithMany("Credits")
                        .HasForeignKey("ToAccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Contacts.Payee", b =>
                {
                    b.HasOne("FamilyCore.Module.BusinessObjects.Shared.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressID");

                    b.HasOne("FamilyCore.Module.BusinessObjects.Shared.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressID");

                    b.Navigation("BillingAddress");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Contacts.PayeeContact", b =>
                {
                    b.HasOne("FamilyCore.Module.BusinessObjects.Contacts.Payee", "Payee")
                        .WithMany("PayeeContacts")
                        .HasForeignKey("PayeeID");

                    b.Navigation("Payee");
                });

            modelBuilder.Entity("PermissionPolicyRolePermissionPolicyUser", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRole", null)
                        .WithMany()
                        .HasForeignKey("RolesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyUser", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.Event", b =>
                {
                    b.Navigation("RecurrenceEvents");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ModelDifference", b =>
                {
                    b.Navigation("Aspects");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", b =>
                {
                    b.Navigation("ActionPermissions");

                    b.Navigation("NavigationPermissions");

                    b.Navigation("TypePermissions");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", b =>
                {
                    b.Navigation("MemberPermissions");

                    b.Navigation("ObjectPermissions");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EFCore.AuditTrail.AuditEFCoreWeakReference", b =>
                {
                    b.Navigation("AuditItems");

                    b.Navigation("NewItems");

                    b.Navigation("OldItems");

                    b.Navigation("UserItems");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Accounting.Account", b =>
                {
                    b.Navigation("CommLogs");

                    b.Navigation("Credits");

                    b.Navigation("Debits");
                });

            modelBuilder.Entity("FamilyCore.Module.BusinessObjects.Contacts.Payee", b =>
                {
                    b.Navigation("PayeeContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
